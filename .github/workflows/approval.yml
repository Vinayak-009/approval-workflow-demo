name: Terraform Deployment with Google Chat Approval

on:
  push:
    branches:
      - main # or any other branch you use for deployment

jobs:
  terraform-deploy-with-approval:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    environment:
      name: production

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure GCP Credentials
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/554761590655/locations/global/workloadIdentityPools/new-pool/providers/github-oidc-provider'
          service_account: 'github-actions-sa@no-migration.iam.gserviceaccount.com'

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.4.5  # Specify your desired version

      - name: Terraform Init
        run: terraform init
      
      - name: Terraform Plan
        id: terraform_plan
        run: terraform plan -out=tfplan | tee terraform_plan.txt

      - name: Extract Terraform Changes
        id: extract_changes
        run: |
          grep -E '(\+|\-|\~)' terraform_plan.txt > terraform_changes.txt
          if [ -s "terraform_changes.txt" ]; then
            echo "Terraform changes:"
            cat terraform_changes.txt
          else
             echo "No Terraform changes detected"
          fi

      - name: Construct Google Chat Message
        id: construct-message
        run: |
          # Escaping the terraform changes for Google Chat message
          terraform_changes=$(cat terraform_changes.txt)
          MESSAGE=$(printf '{"cards": [ { "header": { "title": "Terraform Approval", "subtitle": "Please review changes" }, "sections": [ { "widgets": [ {"textParagraph": { "text": "Terraform changes:\n```%s```" }} ] }, { "widgets": [ { "textParagraph": { "text": "Please approve the deployment [here](https://github.com/%s/actions/runs/%s)"}} ] } ] } ]}' "$terraform_changes" "${{ github.repository }}" "${{ github.run_id }}")
          
          # Write the message to the environment file
          echo "MESSAGE=$MESSAGE" >> $GITHUB_ENV

      - name: Send Google Chat Approval Request
        run: |
          output=$(curl --max-time 10 -X POST \
          -H 'Content-Type: application/json' \
          -H "Authorization: Bearer ${{ secrets.GOOGLE_CHAT_TOKEN }}" \
          -d "${{ env.MESSAGE }}" "${{ secrets.GOOGLE_CHAT_SPACE_URL }}" )
          if [ $? -ne 0 ]; then
            echo "Error sending Google Chat message: $output"
            exit 1
          fi

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

      - name: Construct Google Chat Post-Deployment Notification
        id: construct-post-deploy-message
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            MESSAGE='{"cards": [ { "header": { "title": "Deployment Notification", "subtitle": "Deployment finished" }, "sections": [ { "widgets": [ { "textParagraph": { "text": "Terraform apply was successful." }} ] } ] } ]}'
          else
            MESSAGE='{"cards": [ { "header": { "title": "Deployment Notification", "subtitle": "Deployment failed" }, "sections": [ { "widgets": [ { "textParagraph": { "text": "Terraform apply failed. Please check the logs." }} ] } ] } ]}'
          fi
          echo "MESSAGE=$MESSAGE" >> $GITHUB_ENV

      - name: Send Google Chat Post-Deployment Notification
        if: success()
        run: |
          output=$(curl --max-time 10 -X POST \
            -H 'Content-Type: application/json' \
            -H "Authorization: Bearer ${{ secrets.GOOGLE_CHAT_TOKEN }}" \
            -d "${{ env.MESSAGE }}" "${{ secrets.GOOGLE_CHAT_SPACE_URL }}" )
          if [ $? -ne 0 ]; then
            echo "Error sending Google Chat message: $output"
            exit 1
          fi

      - name: Send Google Chat Post-Deployment Notification (Failure)
        if: failure()
        run: |
          output=$(curl --max-time 10 -X POST \
            -H 'Content-Type: application/json' \
            -H "Authorization: Bearer ${{ secrets.GOOGLE_CHAT_TOKEN }}" \
            -d "${{ env.MESSAGE }}" "${{ secrets.GOOGLE_CHAT_SPACE_URL }}" )
          if [ $? -ne 0 ]; then
            echo "Error sending Google Chat message: $output"
            exit 1
          fi
